String Theory:

About String.

The String class represents character strings. All string literals in Java programs, 
such as "abc", are implemented as instances of this class.

Strings are constant; their values cannot be changed after they are created. 
String buffers support mutable strings. Because String objects are immutable they can be 
shared. For example:

     String str = "abc";
 
is equivalent to:

     char data[] = {'a', 'b', 'c'};
     String str = new String(data);
 
Here are some more examples of how strings can be used:

     System.out.println("abc");
     String cde = "cde";
     System.out.println("abc" + cde);
     String c = "abc".substring(2,3);
     String d = cde.substring(1, 2);
 
The class String includes methods for examining individual characters of the sequence, 
for comparing strings, for searching strings, for extracting substrings, and for creating 
a copy of a string with all characters translated to uppercase or to lowercase. 
Case mapping is based on the Unicode Standard version specified by the Character class.

The Java language provides special support for the string concatenation operator ( + ), 
and for conversion of other objects to strings. String concatenation is implemented through 
the StringBuilder(or StringBuffer) class and its append method. String conversions are 
implemented through the method toString, defined by Object and inherited by all classes 
in Java. For additional information on string concatenation and conversion, see Gosling, 
Joy, and Steele, The Java Language Specification.

Unless otherwise noted, passing a null argument to a constructor or method in this 
class will cause a NullPointerException to be thrown.

A String represents a string in the UTF-16 format in which supplementary characters are 
represented by surrogate pairs (see the section Unicode Character Representations in the 
Character class for more information). Index values refer to char code units, so a supplementary
 character uses two positions in a String.

The String class provides methods for dealing with Unicode code points (i.e., characters), 
in addition to those for dealing with Unicode code units (i.e., char values).

=================================================
To accomplish the string reversal, the program had to convert the string to an array 
of characters (first for loop), reverse the array into a second array (second for loop), 
and then convert back to a string. The String class includes a method, getChars(), 
to convert a string, or a portion of a string, into an array of characters so we could 
replace the first for loop in the program above with.
palindrome.getChars(0, len, tempCharArray, 0);

For example.
A palindrome is a word or sentence that is symmetric—it is spelled the same forward and 
backward, ignoring case and punctuation.

public class StringDemo {
    public static void main(String[] args) {
        String palindrome = "Dot saw I was Tod";
        int len = palindrome.length();
        char[] tempCharArray = new char[len];
        char[] charArray = new char[len];
        
        // put original string in an 
        // array of chars
        for (int i = 0; i < len; i++) {
            tempCharArray[i] = 
                palindrome.charAt(i);
        } 
        
        // reverse array of chars
        for (int j = 0; j < len; j++) {
            charArray[j] =
                tempCharArray[len - 1 - j];
        }
        
        String reversePalindrome =
            new String(charArray);
        System.out.println(reversePalindrome);
    }
}



=================================================
compareTo():

Compares two strings lexicographically. The comparison is based on the Unicode value of 
each character in the strings. The character sequence represented by this String object 
is compared lexicographically to the character sequence represented by the argument string.
The result is a negative integer: 
if this String object lexicographically precedes the argument string. 
The result is a positive integer: 
if this String object lexicographically follows the argument string. 
The result is zero:
 if the strings are equal; compareTo returns 0 exactly when the equals(Object) method would 
 return true.
This is the definition of lexicographic ordering. If two strings are different, then either 
they have different characters at some index that is a valid index for both strings, or their
 lengths are different, or both. If they have different characters at one or more index 
 positions, let k be the smallest such index; then the string whose character at position k 
 has the smaller value, as determined by using the < operator, lexicographically precedes 
 the other string. In this case, compareTo returns the difference of the two character 
 values at position k in the two string -- that is, the value:

 this.charAt(k)-anotherString.charAt(k)
 
If there is no index position at which they differ, then the shorter string 
lexicographically precedes the longer string. In this case, compareTo returns the 
difference of the lengths of the strings -- that is, the value:
 this.length()-anotherString.length()
 
Specified by: compareTo(...) in Comparable
Parameters:
anotherString the String to be compared.
Returns:
the value 0 if the argument string is equal to this string; a value less than 0 if 
this string is lexicographically less than the string argument; and a value greater 
than 0 if this string is lexicographically greater than the string argument.
===============================================

intern() method

Returns a canonical representation for the string object.
A pool of strings, initially empty, is maintained privately by the class String.

When the intern method is invoked, if the pool already contains a string equal to this 
String object as determined by the equals(Object) method, then the string from the pool 
is returned. Otherwise, this String object is added to the pool and a reference to this 
String object is returned.

It follows that for any two strings s and t, s.intern() == t.intern() is true if and only
 if s.equals(t) is true.

All literal strings and string-valued constant expressions are interned. String literals 
are defined in section 3.10.5 of the The Java™ Language Specification.

Returns:
a string that has the same contents as this string, but is guaranteed to be from a pool 
of unique strings.

